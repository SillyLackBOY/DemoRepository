package com.chillax_li.main;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JFileChooser;
import javax.swing.filechooser.FileSystemView;

import com.chillax_li.util.ApkUtil;
import com.chillax_li.util.RuntimeHelperException;

/**
 * 
 * @author Administrator
 */
public class MainTest extends javax.swing.JFrame {

	private File f = null;
	private List<String> pathList = new ArrayList<String>();;

	/**
	 * Creates new form NewJFrame
	 */
	public MainTest() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jButton1 = new javax.swing.JButton();
		jScrollPane1 = new javax.swing.JScrollPane();
		jTextArea1 = new javax.swing.JTextArea();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

		jButton1.setText("选择文件位置");
		jButton1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				openFilePath(evt);
			}
		});

		jTextArea1.setColumns(20);
		jTextArea1.setFont(new java.awt.Font("宋体", 0, 20));
		jTextArea1.setRows(5);
		jScrollPane1.setViewportView(jTextArea1);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addContainerGap()
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(
														jScrollPane1,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														542, Short.MAX_VALUE)
												.addGroup(
														layout.createSequentialGroup()
																.addComponent(
																		jButton1)
																.addGap(0,
																		0,
																		Short.MAX_VALUE)))
								.addContainerGap()));
		layout.setVerticalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addContainerGap()
								.addComponent(jButton1)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addComponent(jScrollPane1,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										218,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addContainerGap()));

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void openFilePath(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_openFilePath
		// TODO add your handling code here:
		int result = 0;
		String path = null;
		JFileChooser fileChooser = new JFileChooser();
		FileSystemView fsv = FileSystemView.getFileSystemView(); // 注意了，这里重要的一句
		System.out.println(fsv.getHomeDirectory()); // 得到桌面路径
		fileChooser.setCurrentDirectory(fsv.getHomeDirectory());

		fileChooser.setDialogTitle("选择文件路径");
		fileChooser.setApproveButtonText("确定");
		fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
		result = fileChooser.showOpenDialog(this);
		if (JFileChooser.APPROVE_OPTION == result) {
			path = fileChooser.getSelectedFile().getPath();
			System.out.println("path: " + path);
		}
		if (path == null || path.equals("")) {
			return;
		}
		jTextArea1.setText("");
		f = new File(path);
		if (f.exists()) {
			getList(f);

			for (String filePath : pathList) {
				File file = new File(filePath);
				if (!file.exists()) {
					break;
				}
				try {
					String str = jTextArea1.getText();
					String s = "文件名:" + file.getName() + "\n" + "文件大小:"
							+ getFileSize(file) + "Bit; "
							+ (float) getFileSize(file) / (float) 1024
							/ (float) 1024 + "MB"
							+ ApkUtil.getApkInfo(file.getPath()) + "\n\n";
					jTextArea1.setText(s + str);
				} catch (Exception ex) {
					Logger.getLogger(MainTest.class.getName()).log(
							Level.SEVERE, null, ex);
				}
			}
		}
	}

	private void getList(File file) {
		if (file.isFile() && file.getName().endsWith(".apk")) {
			pathList.add(file.getPath());
		} else {
			File fileList[] = file.listFiles();
			for (File f : fileList) {
				try {
					getList(f);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}
	}

	/**
	 * 获取指定文件大小
	 * 
	 * @param f
	 * @return
	 * @throws Exception
	 */
	private long getFileSize(File file) throws Exception {
		long size = 0;
		if (file.exists()) {
			FileInputStream fis = null;
			fis = new FileInputStream(file);
			size = fis.available();
		} else {
			file.createNewFile();
		}
		return size;
	}

	public static void main(String[] args) throws IOException {
		boolean getParamsResult = getParamsFromBat();
		if(!getParamsResult){
			return;
		}
		boolean isGame=false;
		//遍历doc/MoreComponent文件夹里所有的apk文件
		File[] listFiles = docDir.listFiles();
		for (File file : listFiles) {
			if(file.getName().endsWith(".apk")){
				execMonkey(file.getAbsolutePath());
			}
			
		}
		
	}

	private static boolean getParamsFromBat() {
		System.out.println("请输入，你需求批量测试的apk文件夹路径。");
		Scanner scanner=new Scanner(System.in);
		String doc = scanner.nextLine().trim();
		docDir = new File(doc);
		if(!docDir.exists()){
			System.out.println("你输入的apk文件夹不存在，请确认后重新执行。");
			scanner.close();
			return false;
		}else if(!docDir.isDirectory()){
			System.out.println("你输入的不是目录，请确认后重新执行。");
			scanner.close();
			return false;
		}
		System.out.println("请输入，你的随机测试数目，如：5000");
		Scanner in=new Scanner(System.in);
		num = in.nextInt()+"";
		in.close();
		return true;
	}
	public static void execMonkey(String apkPath) {
		String packageName = ApkUtil.getApkPackageName(apkPath);
		try {
			com.chillax_li.util.RuntimeHelper.exec("adb", "install", apkPath);
			com.chillax_li.util.RuntimeHelper.exec("adb", "shell", "monkey",
					"-p", packageName,num);
		} catch (RuntimeHelperException e) {
			e.printStackTrace();
		}

	}

	private javax.swing.JButton jButton1;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JTextArea jTextArea1;
	private static String num;
	private static File docDir;
}
